plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.jetbrains.kotlin.jvm' version '1.7.10'
}

static def determineVersion(String defaultVersion) {
    def envVersion = System.getenv('VERSION')
    return envVersion == null ? defaultVersion : envVersion
}

def localProperties = new Properties()
def propertiesFile = rootProject.file('local.properties')
if (propertiesFile.exists()) {
    localProperties.load(new FileInputStream(propertiesFile))
}

group = 'tk.bteitalia.core'
version = determineVersion('0.0.1')

repositories {
    mavenCentral()

    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }

    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }

    maven {
        name = 'enginehub'
        url = 'https://maven.enginehub.org/repo/'
    }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.12.2-R0.1-SNAPSHOT'

    compileOnly 'com.sk89q.worldguard:worldguard-legacy:6.2'

    implementation 'dev.dejvokep:boosted-yaml-spigot:1.3'

    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.10'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.7.10'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-common:1.7.10'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.7.10'
    implementation 'org.jetbrains:annotations:23.0.0'
}

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    dependencies {
        include(dependency('org.jetbrains.kotlin:kotlin-stdlib-jdk8'))
        include(dependency('org.jetbrains.kotlin:kotlin-stdlib-jdk7'))
        include(dependency('org.jetbrains.kotlin:kotlin-stdlib-common'))
        include(dependency('org.jetbrains.kotlin:kotlin-stdlib'))
        include(dependency('org.jetbrains:annotations'))
        include(dependency('dev.dejvokep:boosted-yaml-spigot'))
    }

    relocate 'kotlin', 'tk.bteitalia.core.shadow.kotlin'
    relocate 'org.jetbrains', 'tk.bteitalia.core.shadow.org.jetbrains'
    relocate 'org.intellij', 'tk.bteitalia.core.shadow.org.intellij'
    relocate 'dev.dejvokep', 'tk.bteitalia.core.shadow.dev.dejvokep'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

if (file('local.gradle').exists()) {
    apply from: 'local.gradle'
}
