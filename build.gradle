plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.jetbrains.kotlin.jvm' version '1.7.10'
}

static def determineVersion(String defaultVersion) {
    def envVersion = System.getenv('VERSION')
    return envVersion == null ? defaultVersion : envVersion
}

def localProperties = new Properties()
def propertiesFile = rootProject.file('local.properties')
if (propertiesFile.exists()) {
    localProperties.load(new FileInputStream(propertiesFile))
}

group = 'tk.bteitalia.core'
version = determineVersion('1.0.2')

repositories {
    mavenCentral()

    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }

    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }

    maven {
        name = 'enginehub'
        url = 'https://maven.enginehub.org/repo/'
    }

    maven {
        name = 'aikar-repo'
        url = 'https://repo.aikar.co/content/groups/aikar/'
    }

    maven { url 'https://jitpack.io' }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.12.2-R0.1-SNAPSHOT'

    compileOnly 'com.sk89q.worldguard:worldguard-legacy:6.2'

    shadow 'com.github.jkcclemens:khttp:0.1.0'
    shadow 'dev.dejvokep:boosted-yaml-spigot:1.3'
    shadow 'co.aikar:acf-paper:0.5.1-SNAPSHOT'
    shadow 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.10'
}

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = 11
    targetCompatibility = 11
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

task relocateShadowJar(type: ConfigureShadowRelocation) {
    target = tasks.shadowJar
    prefix = 'tk.bteitalia.core.shadow'
}
tasks.shadowJar.dependsOn tasks.relocateShadowJar

shadowJar {
    minimize()
    configurations = [project.configurations.shadow]
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

if (file('local.gradle').exists()) {
    apply from: 'local.gradle'
}
